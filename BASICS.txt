==============================================================================================
Height of a Node ------- number of edges from that node to the longest possible leaf
Height of a Tree ------- height of the root


        1           ---- 1's Height=3
      /   \
     2     3        ---- 2's Height=2	3's Height=1
    / \   / \
   4   5 6   7      ---- 4's Height=1	5's Height=0	6's Height=0	7's Height=0
  / \
 8   9              ---- 8's Height=0	9's Height=0



Binary tree of height 'h' ----- maximum node count (2^h+1 - 1) 
								minimum node count (h + 1)

Binary tree of 'N' nodes ------ maximum height (N)
								minimum height (Floor(LogN))

Binary tree of at height 'h' -- maximum number of nodes (CEIL(N / 2^h+1))




==============================================================================================
-------------------
PERFECT BINARY TREE
-------------------
All nodes have 2 children
All leaves are at same level
	   1                       1
     /   \                    / \
    2     3                  2   3
   / \   / \
  4   5 6   7

--------------------
COMPLETE BINARY TREE
--------------------
All nodes have 0 or 2 children
	   1                    1                        1
     /   \                /   \                    /   \
    2     3              2     3                  2     3
   / \   / \                  / \                / \   / \
  4   5 6   7                4   5              4   5 6   7
                                / \            / \
                               6   7          8   9

---------------------------
ALMOST COMPLETE BINARY TREE
---------------------------
Except last level, other levels are completely filled
The last level has all keys as left as possible	
Example: binary heap
	       1
        /     \
       2       3
     /   \    / \
    4     5  6   7
   / \   /
  8   9 10




==============================================================================================
--------------------
BALANCED BINARY TREE
--------------------
If height of the binary tree is O(Logn)
	
Example - AVL Tree maintains O(Logn) height 
		- by keeping the difference between heights of left & right subtrees as 1.
	
Example - Red-Black Tree maintain O(Logn) height
		- by keeping same the number of Black nodes on every root to leaf paths
		- by making sure that there are no adjacent red nodes




==============================================================================================
--------------------
UNLABLED BINARY TREE
--------------------
A Binary Tree is unlabeled if nodes are not assigned any label (value)
	  o
	 / \
	o   o


HOW MANY DIFFERENT UNLABELED BINARY TREES CAN BE THERE WITH N NODES?
	For n=1, only  1 unlabeled binary tree structure possible
	For n=2, only  2 unlabeled binary tree structure possible
	For n=3, only  5 unlabeled binary tree structure possible
	For n=4, only 14 unlabeled binary tree structure possible
	...

	This is Catalan Series
	1 1 2 5 14 42 132 429 1430 4862 ....
														  (2n)!
	The n'th Catalan Number can also be evaluated as = -----------
														(n+1)! * n! 


------------------
LABLED BINARY TREE
------------------
A Binary Tree is labeled if every node is assigned a label (value)
	  1
	 / \
	2   3


HOW MANY DIFFERENT LABLED BINARY TREES CAN BE THERE WITH N NODES?
	First, count of the unlabeled trees as above.
	Now every unlabeled tree with n nodes can create n! labeled trees by assigning different permutations of labels to all nodes.
	
						(2n)! * n!
	So the count is = --------------
						(n+1)! * n!




==============================================================================================
Insert/Delete operations in Binary Tree 
	are slower than Array
	and quicker than Linked List


DFS (Depth First Search) (InOrder, PreOrder, PostOrder)
	- it uses Stack data structure.
	- it requires O(n) time
	- it requires O(h) extra space (h = maximum height of Binary Tree)
	- it starts visiting nodes from leaves. So if we need to search something that is closer to a leaf, choose DFS


BFS (Breadth First Search)
	- it uses Queue data structure for finding the shortest path.
	- it requires O(n) time
	- it requires O(w) extra space (w = maximum width of Binary Tree)
	- it starts visiting nodes from root. So if we need to search something that is closer to a root, choose BFS


If the tree is very deep and solutions are rare, DFS might take an extremely long time, but BFS could be faster.
If the tree is very wide, a BFS might need too much memory, so it might be completely impractical.

Read More:
https://stackoverflow.com/questions/3332947/when-is-it-practical-to-use-depth-first-search-dfs-vs-breadth-first-search-bf




==============================================================================================
If you are given two traversal sequences, can you construct the binary tree?
	if we are given InOrder & PreOrder --> we can construct the tree
	if we are given InOrder & PostOrder --> we can construct the tree
	if we are given InOrder & LevelOrder --> we can construct the tree
	
	That means that the InOrder sequence is the must.
	Otherwise, the tree can be constructed.
	Even if PreOrder, PostOrder and LevelOrder are given, the tree can not be constructed.



